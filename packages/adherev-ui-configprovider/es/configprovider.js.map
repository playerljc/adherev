{"version":3,"file":"configprovider.js","sources":["configprovider.js"],"sourcesContent":["import { defineComponent, onMounted, ref, watch } from 'vue';\nimport { object } from 'vue-types';\nimport Hooks from '@baifendian/adherev-ui-hooks';\nimport Intl from '@baifendian/adherev-util-intl';\nimport Mixins from '@baifendian/adherev-util-mixins';\nimport Resource from '@baifendian/adherev-util-resource';\nexport var configProviderProps = {\n  intl: object().def(function () {\n    return {\n      lang: 'zh_CN',\n      locales: {},\n      prefix: 'local',\n      mainLanguage: 'zh_CN'\n    };\n  })\n};\nvar forceUpdate = Mixins.forceUpdate;\nvar useForceUpdate = Hooks.useForceUpdate;\nvar ConfigProvider = defineComponent({\n  name: 'adv-configprovider',\n  mixins: [forceUpdate],\n  props: configProviderProps,\n  setup: function setup(props, _a) {\n    var slots = _a.slots;\n    var isIntlInit = ref(false);\n    var $forceUpdate = useForceUpdate();\n    var init = function init() {\n      return Intl.init({\n        prefix: props.intl.prefix || 'local',\n        currentLocale: props.intl.lang,\n        locales: props.intl.locales || {},\n        mainLanguage: props.intl.mainLanguage || 'zh_CN'\n      }, Intl.isInit()).then(function () {\n        Resource.Dict.value.LocalsMoment.value[props.intl.lang]();\n        if (!isIntlInit.value) {\n          isIntlInit.value = true;\n        } else {\n          $forceUpdate();\n        }\n      });\n    };\n    watch([function () {\n      return props.intl.lang;\n    }, function () {\n      return props.intl.locales;\n    }, function () {\n      return props.intl.prefix;\n    }, function () {\n      return props.intl.mainLanguage;\n    }], function () {\n      return init();\n    });\n    onMounted(function () {\n      return init();\n    });\n    return function () {\n      var _a;\n      return isIntlInit.value ? (_a = slots === null || slots === void 0 ? void 0 : slots.default) === null || _a === void 0 ? void 0 : _a.call(slots) : null;\n    };\n  }\n});\nexport default ConfigProvider;"],"names":["defineComponent","onMounted","ref","watch","object","Hooks","Intl","Mixins","Resource","configProviderProps","intl","def","lang","locales","prefix","mainLanguage","forceUpdate","useForceUpdate","ConfigProvider","name","mixins","props","setup","_a","init","currentLocale","isInit","then","Dict","value","LocalsMoment","isIntlInit","$forceUpdate","slots","default","call"],"mappings":"OAASA,gBAAiBC,UAAWC,IAAKC,KAAkB,KAAL,aAC9CC,MAAyB,KAAX,mBAChBC,UAAW,sCACXC,SAAU,uCACVC,WAAY,yCACZC,aAAc,oCACd,IAAIC,oBAAsB,CAC/BC,KAAMN,OAAO,EAAEO,IAAI,WACjB,MAAO,CACLC,KAAM,QACNC,QAAS,GACTC,OAAQ,QACRC,aAAc,OAChB,CACF,CAAC,CACH,EACIC,YAAcT,OAAOS,YACrBC,eAAiBZ,MAAMY,eACvBC,eAAiBlB,gBAAgB,CACnCmB,KAAM,qBACNC,OAAQ,CAACJ,aACTK,MAAOZ,oBACPa,MAAO,SAAeD,EAAOE,GAIhB,SAAPC,IACF,OAAOlB,KAAKkB,KAAK,CACfV,OAAQO,EAAMX,KAAKI,QAAU,QAC7BW,cAAeJ,EAAMX,KAAKE,KAC1BC,QAASQ,EAAMX,KAAKG,SAAW,GAC/BE,aAAcM,EAAMX,KAAKK,cAAgB,OAC3C,EAAGT,KAAKoB,OAAO,CAAC,EAAEC,KAAK,WACrBnB,SAASoB,KAAKC,MAAMC,aAAaD,MAAMR,EAAMX,KAAKE,MAAM,EACnDmB,EAAWF,MAGdG,EAAa,EAFbD,EAAWF,MAAQ,CAAA,CAIvB,CAAC,CACH,CAjBA,IAAII,EAAQV,EAAGU,MACXF,EAAa7B,IAAI,CAAA,CAAK,EACtB8B,EAAef,eAAe,EA8BlC,OAdAd,MAAM,CAAC,WACL,OAAOkB,EAAMX,KAAKE,IACpB,EAAG,WACD,OAAOS,EAAMX,KAAKG,OACpB,EAAG,WACD,OAAOQ,EAAMX,KAAKI,MACpB,EAAG,WACD,OAAOO,EAAMX,KAAKK,YACpB,GACSS,CACR,EACDvB,UACSuB,CACR,EACM,WACL,IAAID,EACJ,OAAOQ,EAAWF,MAAQ,OAACN,EAAKU,MAAAA,EAAqC,KAAA,EAASA,EAAMC,SAAqC,KAAA,EAASX,EAAGY,KAAKF,CAAK,EAAI,IACrJ,CACF,CACF,CAAC,iBACcf,sBAvDJT,mBAuDkB"}