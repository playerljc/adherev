{"version":3,"file":"index-protable.js","sources":["demo/index-protable.js"],"sourcesContent":["// import mergewith from 'lodash.mergewith';\nimport Vue from 'vue';\nimport { createStore } from './store';\nimport AntdvFormItem from '@baifendian/adherev-ui-antdvformitem';\nimport Dict from '@baifendian/adherev-util-dict';\nimport SearchTable from '../index';\nimport ProTable from './ProTable';\nimport TestDist from './dict.test.config';\nAntdvFormItem.use(Vue);\nDict.use(Vue);\n// 配置字典\nDict.init([TestDist], {\n  isFunMemo: false\n});\nAntdvFormItem.FormItemGeneratorToDict.init(Vue);\nimport '../index.less';\nimport './index.less';\nSearchTable.use(Vue);\nvar SearchTableImplementFactory = SearchTable.SearchTableImplementFactory;\nnew Vue({\n  el: '#app',\n  store: createStore(),\n  render: function render(h) {\n    // return h(ProTable, {\n    //   props: {\n    //     wrapStyle: 'height:100%',\n    //     isShowExpandSearch: true,\n    //     defaultExpandSearchCollapse: false,\n    //     fixedHeaderAutoTable: true,\n    //     fixedTableSpaceBetween: true,\n    //   },\n    // });\n    return h(SearchTableImplementFactory(ProTable) /*{\n                                                   props: {\n                                                   wrapStyle: 'height:100%',\n                                                   isShowExpandSearch: true,\n                                                   defaultExpandSearchCollapse: false,\n                                                   fixedHeaderAutoTable: true,\n                                                   fixedTableSpaceBetween: true,\n                                                   },\n                                                   }*/);\n  }\n});\n// const mergeDataConfig = Vue.config.optionMergeStrategies.data;\n//\n// Vue.config.optionMergeStrategies.data = function (toVal, fromVal) {\n//   if (fromVal && toVal) {\n//     return () => {\n//       const fromValue = fromVal();\n//       const toValue = toVal();\n//\n//       return mergewith(fromValue, toValue, (objValue, srcValue) => {\n//         if (Array.isArray(objValue)) {\n//           return objValue.concat(srcValue);\n//         }\n//       });\n//     };\n//   }\n//\n//   if (fromVal) {\n//     return fromVal;\n//   }\n//\n//   if (toVal) {\n//     return toVal;\n//   }\n// };\n//\n// const Sub = {\n//   data() {\n//     return {\n//       arrValue: [6],\n//     };\n//   },\n//   methods: {\n//     foo: function () {\n//       console.log('foo');\n//     },\n//     conflicting: function () {\n//       console.log('from mixin');\n//     },\n//   },\n// };\n//\n// const App = {\n//   mixins: [Sub],\n//   data() {\n//     return {\n//       arrValue: [1, 2],\n//     };\n//   },\n//   methods: {\n//     bar: function () {\n//       console.log('bar');\n//     },\n//     conflicting: function () {\n//       console.log('from self');\n//     },\n//   },\n//   created: function () {\n//     console.log(this.arrValue);\n//   },\n//   template: `\n//     <div>\n//       {{arrValue.join(',')}}\n//     </div>\n//   `,\n// };\n//\n// var app = new Vue({\n//   el: '#app',\n//   render(h) {\n//     return h(App);\n//   },\n// });"],"names":["Vue","createStore","AntdvFormItem","Dict","SearchTable","ProTable","TestDist","use","init","isFunMemo","FormItemGeneratorToDict","SearchTableImplementFactory","el","store","render","h"],"mappings":"OACOA,QAAS,aACPC,WAA4B,KAAT,iBACrBC,kBAAmB,8CACnBC,SAAU,uCACVC,gBAAiB,kBACjBC,aAAc,oBACdC,aAAc,qBACrBJ,cAAcK,IAAIP,GAAG,EACrBG,KAAKI,IAAIP,GAAG,EAEZG,KAAKK,KAAK,CAACF,UAAW,CACpBG,UAAW,CAAA,CACb,CAAC,EACDP,cAAcQ,wBAAwBF,KAAKR,GAAG,QACvC,sBACA,eACPI,YAAYG,IAAIP,GAAG,EACnB,IAAIW,4BAA8BP,YAAYO,4BAC9C,IAAIX,IAAI,CACNY,GAAI,OACJC,MAAOZ,YAAY,EACnBa,OAAQ,SAAgBC,GAUtB,OAAOA,EAAEJ,4BAA4BN,QAAQ,CAQK,CACpD,CACF,CAAC"}