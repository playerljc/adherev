{"version":3,"file":"searchtableimplement.js","sources":["searchtableimplement.js"],"sourcesContent":["import { createVNode as _createVNode } from \"vue\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { __assign, __spreadArray } from \"tslib\"; // @ts-ignore\n\nimport { cleanMixin, mapActions, mapMutations, mapState } from '@ctsj/vuexgenerator';\nimport { defineComponent } from 'vue';\nimport SearchTable, { ROW_SELECTION_NORMAL_MODE, ROW_SELECTION_CONTINUOUS_MODE, NUMBER_GENERATOR_RULE_CONTINUITY } from './searchtable';\nvar selectorPrefix = 'adherev-ui-searchtableimplement';\nexport default (function (serviceName) {\n  return defineComponent({\n    mixins: serviceName ? [SearchTable, cleanMixin([serviceName])] : [SearchTable],\n    data: function data() {\n      var _a;\n\n      return __assign(__assign({}, this.getParams()), (_a = {}, _a[this.getOrderFieldProp()] = this.getOrderFieldValue(), _a[this.getOrderProp()] = this.getOrderPropValue() || 'descend', // 查询参数\n      _a.searchParams = __assign({}, this.getParams()), _a.selectedRowKeys = [], _a.selectedRows = [], _a));\n    },\n    computed: serviceName ? __assign({}, mapState([serviceName])) : {},\n    methods: Object.assign({\n      /**\n       * getFetchListPropName\n       * @override\n       * @description - 获取调用列表接口的函数名\n       */\n      getFetchListPropName: function getFetchListPropName() {\n        return '';\n      },\n\n      /**\n       * getFetchListPropNameToFirstUpper\n       * @override\n       * @description - 获取调用列表接口的函数名首字母大写\n       * @return string\n       */\n      getFetchListPropNameToFirstUpper: function getFetchListPropNameToFirstUpper() {\n        var fetchListPropName = this.getFetchListPropName();\n\n        if (fetchListPropName.length > 1) {\n          return \"\".concat(fetchListPropName.charAt(0).toUpperCase()).concat(fetchListPropName.substring(1));\n        }\n\n        return fetchListPropName;\n      },\n      // ------------ 不需要重写(override)的方法 start ------------------\n\n      /**\n       * onSelectChange\n       * @description - onSelectChange\n       * @param property\n       * @param v\n       */\n      onSelectChange: function onSelectChange(property, v) {\n        // @ts-ignore\n        this[property] = v;\n      },\n\n      /**\n       * onInputChange\n       * @description - onInputChange\n       * @param property\n       * @param e\n       */\n      onInputChange: function onInputChange(property, e) {\n        // @ts-ignore\n        this[property] = e.target.value.trim();\n      },\n\n      /**\n       * onDateTimeRangeChange\n       * @description - onDateTimeRangeChange\n       * @param propertys\n       * @param moments\n       */\n      onDateTimeRangeChange: function onDateTimeRangeChange(propertys, moments) {\n        // @ts-ignore\n        this[propertys[0]] = moments && moments.length ? moments[0] : null; // @ts-ignore\n\n        this[propertys[1]] = moments && moments.length ? moments[1] : null;\n      },\n      // ------------ 不需要重写(override)的方法 end ------------------\n\n      /**\n       * getParams\n       * @override\n       * @description - 获取查询参数对象\n       */\n      getParams: function getParams() {\n        return {};\n      },\n\n      /**\n       * getServiceName\n       * @override\n       * @description - 获取接口服务的model名称\n       */\n      getServiceName: function getServiceName() {\n        return serviceName;\n      },\n\n      /**\n       * getFetchDataParams\n       * @override\n       * @description - 获取调用数据接口的参数\n       */\n      getFetchDataParams: function getFetchDataParams() {\n        return {};\n      },\n\n      /**\n       * isShowNumber\n       * @description - 是否线上序号列\n       * @override\n       * @return {boolean}\n       */\n      isShowNumber: function isShowNumber() {\n        return true;\n      },\n\n      /**\n       * getNumberGeneratorRule\n       * @override\n       * @description - 表格序号列的生成规则\n       */\n      getNumberGeneratorRule: function getNumberGeneratorRule() {\n        return NUMBER_GENERATOR_RULE_CONTINUITY;\n      },\n\n      /**\n       * getNumberGeneratorRule - 获取符号列的生成规则\n       */\n      getRowSelectionMode: function getRowSelectionMode() {\n        return ROW_SELECTION_NORMAL_MODE;\n      },\n\n      /**\n       * getTableNumberColumnWidth\n       * @override\n       * @description - 表格序号列的宽度\n       */\n      getTableNumberColumnWidth: function getTableNumberColumnWidth() {\n        return 80;\n      },\n\n      /**\n       * getRowKey\n       * @override\n       * @description - 数据的主键\n       */\n      getRowKey: function getRowKey() {\n        return 'id';\n      },\n\n      /**\n       * getDataKey\n       * @description - 获取数据的key\n       * @protected\n       */\n      getDataKey: function getDataKey() {\n        return 'list';\n      },\n\n      /**\n       * getTotalKey\n       * @description - 获取total的key\n       * @protected\n       */\n      getTotalKey: function getTotalKey() {\n        return 'totalCount';\n      },\n\n      /**\n       * getData\n       * @description - Table的数据(Table的dataSource字段)\n       * @override\n       * @return {Array}\n       */\n      getData: function getData() {\n        // @ts-ignore\n        return this[\"\".concat(serviceName).concat(this.getFetchListPropNameToFirstUpper())][this.getDataKey()];\n      },\n\n      /**\n       * getTotal\n       * @description - Table数据的总条数\n       * @override\n       */\n      getTotal: function getTotal() {\n        // @ts-ignore\n        return this[\"\".concat(serviceName).concat(this.getFetchListPropNameToFirstUpper())][this.getTotalKey()];\n      },\n\n      /**\n       * getRowSelection\n       * @override\n       * @description - 获取表格行选择对象\n       */\n      getRowSelection: function getRowSelection() {\n        var _this = this;\n\n        var selectedRowKeys = this.selectedRowKeys;\n        var self = this;\n\n        function filter(selected, records) {\n          var rowKey = self.getRowKey();\n\n          if (selected) {\n            // add\n            self.selectedRowKeys = __spreadArray(__spreadArray([], self.selectedRowKeys, true), records.map(function (r) {\n              return r[rowKey];\n            }), true);\n            self.selectedRows = __spreadArray(__spreadArray([], self.selectedRows, true), records, true);\n          } else {\n            // remove\n            self.selectedRows = self.selectedRows.filter(function (row) {\n              return !records.find(function (r) {\n                return r[rowKey] === row[rowKey];\n              });\n            });\n            self.selectedRowKeys = self.selectedRowKeys.filter(function (key) {\n              return !records.find(function (r) {\n                return r[rowKey] === key;\n              });\n            });\n          }\n        }\n\n        return {\n          selectedRowKeys: selectedRowKeys,\n          onChange: function onChange(selectedRowKeys, selectedRows) {\n            if (_this.getRowSelectionMode() === ROW_SELECTION_CONTINUOUS_MODE) return;\n            _this.selectedRowKeys = selectedRowKeys;\n            _this.selectedRows = selectedRows;\n          },\n          onSelect: function onSelect(record, selected) {\n            if (_this.getRowSelectionMode() === ROW_SELECTION_NORMAL_MODE) return;\n            filter(selected, [record]);\n          },\n          onSelectAll: function onSelectAll(selected, selectedRows, changeRows) {\n            if (_this.getRowSelectionMode() === ROW_SELECTION_NORMAL_MODE) return;\n            filter(selected, changeRows);\n          }\n        };\n      },\n\n      /**\n       * renderSearchForm\n       * @override\n       * @description - 渲染Table查询的表单\n       */\n      renderSearchForm: function renderSearchForm() {\n        return null;\n      },\n      renderSearchTableImplementInner: function renderSearchTableImplementInner() {\n        // @ts-ignore\n        var innerVNode = this.renderSearchTableInner();\n        return _createVNode(\"div\", {\n          \"ref\": \"innerWrapRef\",\n          \"class\": \"\".concat(selectorPrefix, \"-tablewrapper\")\n        }, [innerVNode]);\n      },\n\n      /**\n       * renderInner\n       * @override\n       * @description - 渲染主体\n       */\n      renderInner: function renderInner() {\n        return this.renderSearchTableImplementInner();\n      },\n\n      /**\n       * renderSearchFooterItems\n       * @description - 渲染表格的工具栏\n       * @override\n       */\n      renderSearchFooterItems: function renderSearchFooterItems() {\n        return [];\n      },\n\n      /**\n       * getOrderFieldProp\n       * @description - 获取排序字段\n       * @override\n       */\n      getOrderFieldProp: function getOrderFieldProp() {\n        return 'orderField';\n      },\n\n      /**\n       * getOrderFieldValue\n       * @description - 获取默认排序字段的值\n       * @override\n       * @protected\n       */\n      getOrderFieldValue: function getOrderFieldValue() {\n        return '';\n      },\n\n      /**\n       * getOrderProp\n       * @description - 获取排序方式\n       */\n      getOrderProp: function getOrderProp() {\n        return 'order';\n      },\n\n      /**\n       * getOrderPropValue\n       * @override\n       * @description - 获取默认排序方式\n       * @protected\n       */\n      getOrderPropValue: function getOrderPropValue() {\n        return 'descend';\n      },\n\n      /**\n       * clear\n       * @description - 清空查询条件\n       * @override\n       */\n      clear: function clear() {\n        var _this = this;\n\n        return new Promise(function (resolve) {\n          var _a;\n\n          Object.assign(_this, __assign(__assign({}, _this.getParams()), (_a = {}, _a[_this.getOrderFieldProp()] = _this.getOrderFieldValue(), _a[_this.getOrderProp()] = _this.getOrderPropValue() || 'descend', // 查询参数\n          _a.searchParams = __assign({}, _this.getParams()), _a.selectedRowKeys = [], _a))); // @ts-ignore\n\n          _this.$nextTick(function () {\n            resolve(null);\n          });\n        });\n      },\n\n      /**\n       * showLoading\n       * @description - 是否显示遮罩\n       * @override\n       */\n      showLoading: function showLoading() {\n        // @ts-ignore\n        return this.loading[\"\".concat(serviceName, \"/\").concat(this.getFetchListPropName())];\n      },\n\n      /**\n       * getSearchParams\n       * @description - 获取查询参数\n       * @protected\n       */\n      getSearchParams: function getSearchParams() {\n        var _a;\n\n        var _b = this,\n            page = _b.page,\n            limit = _b.limit,\n            searchParams = _b.searchParams;\n\n        return __assign({}, __assign(__assign(__assign({\n          page: page,\n          limit: limit\n        }, searchParams), (_a = {}, _a[this.getOrderFieldProp()] = this.getOrderFieldValue(), _a[this.getOrderProp()] = this.getOrderPropValue() || 'descend', _a)), this.getFetchDataParams()));\n      },\n\n      /**\n       * fetchData\n       * @description - 加载数据\n       * @override\n       */\n      fetchData: function fetchData() {\n        return this.fetchDataExecute(this.getSearchParams());\n      },\n\n      /**\n       * fetchDataExecute\n       * @description - 真正的执行获取列表数据的接口\n       * @param searchParams\n       * @protected\n       */\n      fetchDataExecute: function fetchDataExecute(searchParams) {\n        // @ts-ignore\n        return this[\"\".concat(serviceName).concat(this.getFetchListPropNameToFirstUpper(), \"Action\")](searchParams);\n      },\n\n      /**\n       * onSearch\n       * @description - 点击查询\n       * @override\n       */\n      onSearch: function onSearch() {\n        var _this = this;\n\n        var keys = Object.keys(this.getParams());\n        var params = {};\n        keys.forEach(function (key) {\n          // @ts-ignore\n          params[key] = _this[key];\n        });\n        return new Promise(function (resolve) {\n          var _a; // @ts-ignore\n\n\n          _this.searchParams = __assign(__assign({}, params), (_a = {}, _a[_this.getOrderFieldProp()] = _this[_this.getOrderFieldProp()], _a[_this.getOrderProp()] = _this[_this.getOrderProp()], _a)); // @ts-ignore\n\n          _this.$nextTick(function () {\n            _this.fetchData().then(function () {\n              resolve(null);\n            });\n          });\n        });\n      },\n\n      /**\n       * renderSearchTableImplement\n       * @description - renderSearchTableImplement\n       */\n      // @ts-ignore\n      renderSearchTableImplement: function renderSearchTableImplement() {\n        // @ts-ignore\n        return this.renderSearchTable();\n      }\n    }, serviceName ? __assign(__assign({}, mapActions([serviceName])), mapMutations([serviceName])) : {}),\n    render: function render() {\n      return this.renderSearchTableImplement();\n    }\n  });\n});"],"names":["_createVNode","__assign","__spreadArray","cleanMixin","mapActions","mapMutations","mapState","defineComponent","SearchTable","ROW_SELECTION_NORMAL_MODE","ROW_SELECTION_CONTINUOUS_MODE","NUMBER_GENERATOR_RULE_CONTINUITY","selectorPrefix","serviceName","mixins","data","_a","this","getParams","getOrderFieldProp","getOrderFieldValue","getOrderProp","getOrderPropValue","searchParams","selectedRowKeys","selectedRows","computed","methods","Object","assign","getFetchListPropName","getFetchListPropNameToFirstUpper","fetchListPropName","length","concat","charAt","toUpperCase","substring","onSelectChange","property","v","onInputChange","e","target","value","trim","onDateTimeRangeChange","propertys","moments","getServiceName","getFetchDataParams","isShowNumber","getNumberGeneratorRule","getRowSelectionMode","getTableNumberColumnWidth","getRowKey","getDataKey","getTotalKey","getData","getTotal","getRowSelection","_this","self","filter","selected","records","rowKey","map","r","row","find","key","onChange","onSelect","record","onSelectAll","changeRows","renderSearchForm","renderSearchTableImplementInner","innerVNode","renderSearchTableInner","ref","class","renderInner","renderSearchFooterItems","clear","Promise","resolve","$nextTick","showLoading","loading","getSearchParams","page","limit","fetchData","fetchDataExecute","onSearch","keys","params","forEach","then","renderSearchTableImplement","renderSearchTable","render"],"mappings":"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"}