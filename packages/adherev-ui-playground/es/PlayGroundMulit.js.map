{"version":3,"file":"PlayGroundMulit.js","sources":["PlayGroundMulit.js"],"sourcesContent":["import { isVNode as _isVNode, mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.map.delete-all.js\";\nimport \"core-js/modules/esnext.map.every.js\";\nimport \"core-js/modules/esnext.map.filter.js\";\nimport \"core-js/modules/esnext.map.find.js\";\nimport \"core-js/modules/esnext.map.find-key.js\";\nimport \"core-js/modules/esnext.map.includes.js\";\nimport \"core-js/modules/esnext.map.key-of.js\";\nimport \"core-js/modules/esnext.map.map-keys.js\";\nimport \"core-js/modules/esnext.map.map-values.js\";\nimport \"core-js/modules/esnext.map.merge.js\";\nimport \"core-js/modules/esnext.map.reduce.js\";\nimport \"core-js/modules/esnext.map.some.js\";\nimport \"core-js/modules/esnext.map.update.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport { __assign } from \"tslib\";\nimport ConditionalRender from '@baifendian/adherev-ui-conditionalrender';\nimport ContextMenu from '@baifendian/adherev-ui-contextmenu';\nimport omit from 'omit.js';\nimport { defineComponent, ref, watch } from 'vue';\nimport { array } from 'vue-types';\nimport Card from './Card';\nimport CodePanel from './CodePanel';\nimport CodeTabPanel from './CodeTabPanel';\nimport PlayGroundBase, { playGroundBaseProps } from './PlayGroundBase';\n\nfunction _isSlot(s) {\n  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !_isVNode(s);\n}\n\nvar selectPrefix = 'adherev-ui-playground-mulit';\nvar codeType;\n\n(function (codeType) {\n  codeType[\"CodePanel\"] = \"CodePanel\";\n  codeType[\"CodeTabPanel\"] = \"CodeTabPanel\";\n})(codeType || (codeType = {}));\n\nvar playGroundMulitProps = __assign(__assign({}, playGroundBaseProps), {\n  defaultConfig: array().def([])\n});\n\nexport default defineComponent({\n  name: 'adv-playground-mulit',\n  props: playGroundMulitProps,\n  setup: function setup(props, _a) {\n    var slots = _a.slots;\n    var others = omit(playGroundBaseProps, ['getClipboardText', 'defaultExpand']);\n    var expand = ref(props.defaultExpand);\n    var config = ref(props.defaultConfig);\n    var configMap = new Map([[codeType.CodePanel, {\n      render: function render(config) {\n        return (// @ts-ignore\n          _createVNode(CodePanel, config, null)\n        );\n      },\n      getCodeText: function getCodeText(config) {\n        return config.codeText;\n      }\n    }], [codeType.CodeTabPanel, {\n      render: function render(_config, index) {\n        return (// @ts-ignore\n          _createVNode(CodeTabPanel, _mergeProps(_config, {\n            \"onChange\": function onChange(key) {\n              // @ts-ignore\n              config.value[index].active = key;\n            }\n          }), null)\n        );\n      },\n      getCodeText: function getCodeText(config) {\n        var _a;\n\n        return (_a = config.config.find(function (c) {\n          return c.key === config.active;\n        })) === null || _a === void 0 ? void 0 : _a.codeText;\n      }\n    }]]);\n\n    var renderCodePanelView = function renderCodePanelView(config, index) {\n      var _a;\n\n      return _createVNode(\"div\", {\n        \"key\": \"\".concat(index),\n        \"class\": \"\".concat(selectPrefix, \"-codeviewwrap\")\n      }, [_createVNode(\"div\", {\n        \"class\": \"\".concat(selectPrefix, \"-codeviewwrap-title\")\n      }, [config.title]), _createVNode(\"div\", {\n        \"class\": \"\".concat(selectPrefix, \"-codeviewwrap-inner\")\n      }, [(_a = configMap.get(config.type || codeType.CodePanel)) === null || _a === void 0 ? void 0 : _a.render(omit(config, ['title', 'type']), index)])]);\n    };\n\n    var getClipboardText = function getClipboardText(e) {\n      return new Promise(function (resolve) {\n        ContextMenu.open(config.value.map(function (c, index) {\n          return {\n            name: c.title,\n            id: \"\".concat(index),\n            separation: false,\n            attribute: {\n              config: c\n            },\n            children: []\n          };\n        }), // @ts-ignore\n        {\n          width: 200,\n          x: e.clientX,\n          y: e.clientY,\n          maskClosable: true,\n          handler: function handler(id, attribute) {\n            var _a;\n\n            resolve((_a = configMap === null || configMap === void 0 ? void 0 : configMap.get(attribute.config.type || codeType.CodePanel)) === null || _a === void 0 ? void 0 : _a.getCodeText(attribute.config));\n          }\n        });\n      });\n    };\n\n    var onExpand = function onExpand(_expand) {\n      expand.value = !_expand;\n    };\n\n    watch(function () {\n      return props.defaultExpand;\n    }, function (newValue) {\n      expand.value = newValue;\n    });\n    watch(function () {\n      return props.defaultConfig;\n    }, function (newValue) {\n      config.value = newValue;\n    });\n    return function () {\n      var _playGroundBaseProps = {};\n\n      for (var p in others) {\n        _playGroundBaseProps[p] = props[p];\n      }\n\n      return (// @ts-ignore\n        _createVNode(PlayGroundBase, _mergeProps(_playGroundBaseProps, {\n          \"defaultExpand\": expand.value,\n          \"getClipboardText\": getClipboardText,\n          \"onExpand\": onExpand\n        }), {\n          default: function _default() {\n            var _a;\n\n            return (_a = slots === null || slots === void 0 ? void 0 : slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);\n          },\n          codeView: function codeView() {\n            var _slot;\n\n            return _createVNode(ConditionalRender.Show, {\n              \"conditional\": expand.value\n            }, {\n              default: function _default() {\n                return [_createVNode(Card, null, _isSlot(_slot = (config.value || []).map(function (c, index) {\n                  return renderCodePanelView(c, index);\n                })) ? _slot : {\n                  default: function _default() {\n                    return [_slot];\n                  }\n                })];\n              }\n            });\n          }\n        })\n      );\n    };\n  }\n});"],"names":["_isVNode","_mergeProps","_createVNode","__assign","ConditionalRender","ContextMenu","omit","defineComponent","ref","watch","array","Card","CodePanel","CodeTabPanel","PlayGroundBase","playGroundBaseProps","_isSlot","s","Object","prototype","toString","call","codeType","selectPrefix","playGroundMulitProps","defaultConfig","def","name","props","setup","_a","getClipboardText","e","Promise","resolve","open","config","value","map","c","index","title","id","concat","separation","attribute","children","width","x","clientX","y","clientY","maskClosable","handler","configMap","get","type","getCodeText","onExpand","_expand","expand","slots","others","defaultExpand","Map","render","codeText","_config","onChange","key","active","find","newValue","p","_playGroundBaseProps","default","codeView","_slot","Show","conditional","class"],"mappings":"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"}