{"version":3,"file":"PlayGround.js","sources":["PlayGround.js"],"sourcesContent":["import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport { __assign } from \"tslib\";\nimport ConditionalRender from '@baifendian/adherev-ui-conditionalrender';\nimport omit from 'omit.js';\nimport { defineComponent, ref, watch } from 'vue';\nimport { string } from 'vue-types';\nimport Card from './Card';\nimport CodePanel, { codePanelProps } from './CodePanel';\nimport PlayGroundBase, { playGroundBaseProps } from './PlayGroundBase';\n\nvar playGroundProps = __assign(__assign(__assign({}, codePanelProps), playGroundBaseProps), {\n  codeText: string().def('')\n});\n\nexport default defineComponent({\n  name: 'adv-playground',\n  props: playGroundProps,\n  setup: function setup(props, _a) {\n    var slots = _a.slots;\n    var others = omit(playGroundBaseProps, ['getClipboardText', 'defaultExpand']);\n    var expand = ref(props.defaultExpand);\n\n    var getClipboardText = function getClipboardText() {\n      return Promise.resolve(props.codeText);\n    };\n\n    var onExpand = function onExpand(_expand) {\n      expand.value = !_expand;\n    };\n\n    watch(function () {\n      return props.defaultExpand;\n    }, function (newValue) {\n      return expand.value = newValue;\n    });\n    return function () {\n      var _playGroundBaseProps = {};\n\n      for (var p in others) {\n        _playGroundBaseProps[p] = props[p];\n      }\n\n      return (// @ts-ignore\n        _createVNode(PlayGroundBase, _mergeProps(_playGroundBaseProps, {\n          \"defaultExpand\": expand.value,\n          \"getClipboardText\": getClipboardText,\n          \"onExpand\": onExpand\n        }), {\n          default: function _default() {\n            var _a;\n\n            return (_a = slots === null || slots === void 0 ? void 0 : slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);\n          },\n          codeView: function codeView() {\n            return _createVNode(ConditionalRender.Show, {\n              \"conditional\": expand.value\n            }, {\n              default: function _default() {\n                return [_createVNode(Card, null, {\n                  default: function _default() {\n                    return [_createVNode(CodePanel, {\n                      \"lang\": props.lang,\n                      \"codeText\": props.codeText\n                    }, null)];\n                  }\n                })];\n              }\n            });\n          }\n        })\n      );\n    };\n  }\n});"],"names":["_mergeProps","_createVNode","__assign","ConditionalRender","omit","defineComponent","ref","watch","string","Card","CodePanel","codePanelProps","PlayGroundBase","playGroundBaseProps","playGroundProps","codeText","def","name","props","setup","_a","getClipboardText","Promise","resolve","onExpand","_expand","expand","value","slots","others","defaultExpand","newValue","p","_playGroundBaseProps","default","call","codeView","Show","conditional","lang"],"mappings":"OAAuBA,0BAA4BC,kIAG1CC,4BACFC,wEACAC,0BACEC,gBAAiBC,IAAKC,uBACtBC,8BACFC,yBACAC,WAAaC,wCACbC,gBAAkBC,2CAEzB,IAAIC,gBAAkBZ,SAASA,SAASA,SAAS,GAAIS,gBAAiBE,qBAAsB,CAC1FE,SAAUP,SAASQ,IAAI,qBAGVX,gBAAgB,CAC7BY,KAAM,iBACNC,MAAOJ,gBACPK,MAAO,SAAeD,EAAOE,GAKJ,SAAnBC,IACF,OAAOC,QAAQC,QAAQL,EAAMH,UAGhB,SAAXS,EAA6BC,GAC/BC,EAAOC,OAASF,EATlB,IAAIG,EAAQR,EAAGQ,MACXC,EAASzB,KAAKS,oBAAqB,CAAC,mBAAoB,kBACxDa,EAASpB,IAAIY,EAAMY,eAevB,OALAvB,MAAM,WACJ,OAAOW,EAAMY,eACZ,SAAUC,GACX,OAAOL,EAAOC,MAAQI,IAEjB,WACL,IAESC,EAFLC,EAAuB,GAE3B,IAASD,KAAKH,EACZI,EAAqBD,GAAKd,EAAMc,GAGlC,OACE/B,aAAaW,eAAgBZ,YAAYiC,EAAsB,CAC7DH,cAAiBJ,EAAOC,MACxBN,iBAAoBA,EACpBG,SAAYA,IACV,CACFU,QAAS,WACP,IAAId,EAEJ,OAA8E,QAAtEA,EAAKQ,MAAAA,OAAqC,EAASA,EAAMM,eAA4B,IAAPd,OAAgB,EAASA,EAAGe,KAAKP,IAEzHQ,SAAU,WACR,OAAOnC,aAAaE,kBAAkBkC,KAAM,CAC1CC,YAAeZ,EAAOC,OACrB,CACDO,QAAS,WACP,MAAO,CAACjC,aAAaQ,KAAM,KAAM,CAC/ByB,QAAS,WACP,MAAO,CAACjC,aAAaS,UAAW,CAC9B6B,KAAQrB,EAAMqB,KACdxB,SAAYG,EAAMH,UACjB"}